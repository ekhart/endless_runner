local u = require "vertical.assets.utils"

-- todo: 
-- DRY keys "road4"

go.property("road4", 200)
go.property("road3", 440)
go.property("road2", 640)
go.property("road1", 880)

go.property("spawn_density", 460)
go.property("spawn_density_step", 0.1)
go.property("spawn_density_max", 50)
go.property("spawn_probability", 0.2)
go.property("enemy_spawn_y", 3000)

go.property("speed", 4)
go.property("speed_up_size", 0.04)
go.property("speed_up_every_second", 0.08)

go.property("shadow_size", 1)
go.property("points_value", 0.1)


go.property("shake", 0)

local points = 0
local gold = 0
local gold_value = 100
local speed_up_size_accumulator = 0

local function get(property)
	return go.get("#", property)
end

local enemy_factories = { "#enemy_factory", "#enemy_slow_factory" }

local webview_id

function webview_callback(self, webview_id, request_id, type, data)
    if type == webview.CALLBACK_RESULT_URL_OK then
        -- the page is now loaded, let's show it
        print("webview loaded")
        webview.set_visible(webview_id, 1)
    elseif type == webview.CALLBACK_RESULT_URL_ERROR then
        print("Failed to load url: " .. data["url"])
        print("Error: " .. data["error"])
    elseif type == webview.CALLBACK_RESULT_EVAL_OK then
        print("Eval ok. Result: " .. data['result'])
    elseif type == webview.CALLBACK_RESULT_EVAL_ERROR then
        print("Eval not ok. Request # " .. request_id)
    end
end

function init(self)
	-- msg.post("@system:", "toggle_profile")
	
	self.gridw = 0
	self.enemies = {}
	self.golds = {}
	self.shadows = {}

	time_from_start = 0.0
	speed_up_accumulator = 0.0
	spawn_density = get("spawn_density")
  	spawn_density_step = get("spawn_density_step")
  	spawn_density_max = get("spawn_density_max")
	spawn_probability = get("spawn_probability")
	speed_up_size = get("speed_up_size")
	speed_up_every_second = get("speed_up_every_second")
	
	speed = get("speed")
	roads = { get("road4"), get("road3"), get("road2"), get("road1") }
	msg.post("player#script", "set_roads", { roads = roads })
	enemy_spawn_y = get("enemy_spawn_y")
	shadow_size = get("shadow_size")
	points_value = get("points_value")

	print("controller.init")
	msg.post(".", "acquire_input_focus")
  
  local dbg = require "builtins.scripts.mobdebug"  
  dbg.start()
  
  if webview then
    webview_id = webview.create(webview_callback)
  end
  
  	-- msg.post("/camera#camera", "acquire_camera_focus")
	-- self.pos = go.get_world_position()
	-- self.look_at = self.pos
end

function final(self)
	print("controller.final")
	msg.post(".", "release_input_focus")
end

local function print_time(dt)
	local position = vmath.vector3(100, 100, 0)
	local text = string.format( "%.2f", time_from_start)
	local message = { text = text, position = position }
	-- print("text = " .. text)
	msg.post("@render:", "draw_text", message)
end

local function post_gui(message_id, message)
	msg.post("level:/hud#gui", message_id, message)
end

local function object_add_speed(object, speed_up)
	msg.post(object, "add_speed", { speed = speed_up })
end

local function add_speed(objects, speed_up)
	for i, object in ipairs(objects) do
		object_add_speed(object, speed_up)
	end
end

local function update_time(self, dt)
	time_from_start = time_from_start + dt
	speed_up_accumulator = speed_up_accumulator + dt
  
	-- print_time(dt)
	-- print("controller.set_time")
	post_gui("set_time", { time = time_from_start })

	if speed_up_accumulator > speed_up_every_second then
		speed_up_accumulator = 0
		speed_up_size_accumulator = speed_up_size_accumulator + speed_up_size
		
		local groud_speed_up = speed_up_size
		object_add_speed("ground/controller#script", groud_speed_up)
		add_speed(self.enemies, speed_up_size*2)
		add_speed(self.golds, groud_speed_up)
		add_speed(self.shadows, groud_speed_up)
	end
end

local function update_spawn_density()
  if spawn_density > spawn_density_max then
    spawn_density = spawn_density - spawn_density_step
  end
end

local function spawn_enemies(self, dt)
	self.gridw = self.gridw + self.speed

	if self.gridw >= spawn_density then
		self.gridw = 0
		
		if math.random() > spawn_probability then
			local x = roads[math.random(#roads)]
			local is_left_road = false
			-- local is_left_road = x == get("road4") or x == get("road3")
			local enemy_factory = enemy_factories[is_left_road and 2 or 1]
			local pos = vmath.vector3(x, enemy_spawn_y, 1)
			local enemy = factory.create(enemy_factory, pos, nil, {})
			
			-- print("construct")
			-- pprint(enemy)
			-- todo: refact send { x = x, is_left_road = is_left_road } in factory.create
			msg.post(enemy, "construct", { x = x, is_left_road = is_left_road, speed_up_size_accumulator = speed_up_size_accumulator })
			table.insert(self.enemies, enemy)
		end
	end
end

local function spawn_golds(self, dt)
	self.gridw = self.gridw + self.speed

	if self.gridw >= spawn_density then
		self.gridw = 0
		
		if math.random() > spawn_probability then
			local x = roads[math.random(#roads)]
			local pos = vmath.vector3(x, enemy_spawn_y, 1)
			local gold = factory.create("#gold_factory", pos, nil, {})
			msg.post(gold, "construct", { x = x, speed_up_size_accumulator = speed_up_size_accumulator })
			table.insert(self.golds, gold)
		end
	end
end

local function spawn_shadows(self, dt)
	self.gridw = self.gridw + self.speed

	if self.gridw >= spawn_density then
		self.gridw = 0
		
		if math.random() > spawn_probability then
			local pos = vmath.vector3(0, 4000, 0)
			-- local properties = { speed = speed, size = shadow_size, speed_up = speed_up_size_accumulator }
			-- local shadow = factory.create("#shadow_factory", pos, nil, properties)
			local shadow = factory.create("#shadow_factory", pos, nil, {})
			msg.post(shadow, "construct", { speed_up_size_accumulator = speed_up_size_accumulator })
			table.insert(self.shadows, shadow)
		end
	end
end

function update(self, dt)
	if self.shake > 0 then
		go.set_position(self.pos + vmath.vector3(math.random() * self.shake, math.random() * self.shake, 0))
		self.shake = self.shake * 0.9 - 0.1 
	end

	update_time(self, dt)
  	update_spawn_density()
	spawn_enemies(self, dt)
	spawn_golds(self, dt)
	spawn_shadows(self, dt)
end

local function save_highest_score()
  local my_file = sys.get_save_file("freeway68", "my_file")
  local my_table = sys.load(my_file)

  if not next(my_table) then
    table.insert(my_table, points)
    table.insert(my_table, gold)
  end
  
  if my_table[1] < points then
    my_table[1] = points
  end
  
  if my_table[2] < gold then
    my_table[2] = gold
  end
  
  if not sys.save(my_file, my_table) then
    -- Alert user that the data could not be saved
  end
  
  return my_table[1]
end

local function remove_from_table(_table, id)
  for i, element in ipairs(_table) do
    if element == id then
      table.remove(_table, i)
      go.delete(element)
    end
  end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("add_point") then
		points = points + points_value
		post_gui("set_points", { points = points })
	elseif message_id == hash("delete_spawn") then
		remove_from_table(self.enemies, message.id)
  elseif message_id == hash("delete_gold") then
		remove_from_table(self.golds, message.id)
	elseif message_id == hash("delete_shadow") then
		remove_from_table(self.shadows, message.id)
  elseif message_id == hash("game_over") then
    	local high_score = save_highest_score()
    	msg.post("main:/loader", "game_over", { high_score = high_score, gold = gold })
  elseif message_id == hash("collect_gold") then
    	gold = gold + gold_value
    	remove_from_table(self.golds, message.id)
  	elseif message_id == hash("shake") then
		self.shake = 8
	end
end