local beginX
local beginY
local endX
local endY

local xDistance
local yDistance

local startTime = 0

local bDoingTouch
local totalSwipeDistanceLeft
local totalSwipeDistanceRight
local totalSwipeDistanceUp
local totalSwipeDistanceDown

go.property("minSwipeDistance", 40)
go.property("minSwipeTime", 0.6)
go.property("move", 244)


function init(self)
  print("player.init")
  -- needed to handle input
  msg.post(".", "acquire_input_focus")

  self.move = go.get("#", "move")
end

function final(self)
  print("player.final")
  msg.post(".", "release_input_focus")
end

function update(self, dt)
  -- pprint("player position = " .. go.get_position("car"))
end

local function play_animation(animation)
  -- go.set("#sprite", "image")
  msg.post("#sprite", "play_animation", { id = hash(animation) })
end

function on_message(self, message_id, message, sender)
  print("player.on_message " .. message_id)
  if message_id == hash("contact_point_response") then
    -- check if we received a contact point message

    if message.group == hash("enemy") then
      local id = go.get_id("car")
      go.delete(id)

      -- Die and restart
      -- particlefx.play("#deathfx")
      -- play_animation(self, hash("die_right"))
      -- msg.post("#", "disable")
      -- msg.post("hud", "set_lives", { lives = self.lives })
      -- go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_LINEAR, 0.7)
      -- go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,
        -- function()
        --   if self.lives > 1 then  
        --         msg.post("controller#script", "reset")
        --       end
        --   self.lives = self.lives - 1
        --   if self.lives == 0 then
        --     msg.post("hud", "show_game_over")
        --     msg.post("#", "disable")
        --   else
        --     msg.post("#", "reset")
        --   end
        -- end)
        
    elseif message.group == hash("geometry") then
      -- handle_geometry_contact(self, message.normal, message.distance)
    end
  end
end

local function move_car(pos_diff)
	local to = go.get_position("car").x + pos_diff
  go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_OUTBACK, 1, 0, function(self, url, property)
      play_animation("ride")
  end)
end

local function move_horizontal(action_id, action, move_id, pos_diff)
	if action_id == hash(move_id) and action.pressed then
    play_animation("turn_" .. move_id)
    move_car(pos_diff)
	end
end

local function checkSwipeDirection(self)
  if bDoingTouch == true then
    xDistance =  math.abs(endX - beginX) -- math.abs will return the absolute, or non-negative value, of a given value.
    yDistance =  math.abs(endY - beginY)
    if xDistance > yDistance then
      if beginX > endX then
        totalSwipeDistanceLeft = beginX - endX
        if totalSwipeDistanceLeft > self.minSwipeDistance then
          -- print("Swiped Left")
          move_car(-self.move)
        end
      else
        totalSwipeDistanceRight = endX - beginX
        if totalSwipeDistanceRight > self.minSwipeDistance then
          -- print("Swiped Right")
          move_car(self.move)
          
        end
      end
    else
     if beginY > endY then
        totalSwipeDistanceUp = beginY - endY
        if totalSwipeDistanceUp > self.minSwipeDistance then
          -- print("Swiped Down")
        end
       else
        totalSwipeDistanceDown = endY - beginY
        if totalSwipeDistanceDown > self.minSwipeDistance then
          -- print("Swiped Up")
        end
       end
    end
  end
end

local function on_touch_input(self, action_id, action)
	if action_id == hash("touch") then
    if action.pressed then
      bDoingTouch = true
      beginX = action.x
      beginY = action.y
      startTime = os.clock()
    elseif action.released  then
      endX = action.x
      endY = action.y
      if os.clock() - startTime < self.minSwipeTime then
      	checkSwipeDirection(self);
      end
      bDoingTouch = false
    end
  end
end

function on_input(self, action_id, action)
  if action_id then
    print("player.on_input " .. hash(action_id))
	end
  move_horizontal(action_id, action, "right", self.move)
	move_horizontal(action_id, action, "left", -self.move)
	on_touch_input(self, action_id, action)
end